(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{YZNj:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return l}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var o=t("/FXl"),r=t("TjRS");t("aD51");function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/fat-config.mdx"}});var c={_frontmatter:i},s=r.a;function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(o.b)(s,a({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"fat-config"},"Fat Config"),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"using Yontech.Fat;\nusing Yontech.Fat.ConsoleRunner;\n\n/// ...\n\nstatic int Main(string[] args)\n{\n    var config = new FatConfig()\n    {\n        LogLevel = LogLevel.Debug;\n        \n        // ... other configuration\n    };\n\n    config.AddChrome(new ChromeFatConfig()\n    {\n        InitialSize = new Size(1200, 800)\n    });\n\n    config.AddFirefox(new FirefoxFatConfig()\n    {\n        RunInBackground = true,\n    });\n    \n    FatConsoleRunner runner = new FatConsoleRunner(config);\n    runner.Run();\n}\n")),Object(o.b)("h2",{id:"supported-browsers"},"Supported browsers"),Object(o.b)("p",null,"Configure the browsers that you want to be used for testing."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"config.AddChrome();\nconfig.AddChromeRemote(9222);\nconfig.AddFirefox();\n")),Object(o.b)("p",null,"If no browser is being added then the default one will be Chrome."),Object(o.b)("p",null,"You can add the same browsers multiple times (in case that you want to execute with different configurations)."),Object(o.b)("h2",{id:"automatic-pick-up"},"Automatic pick up"),Object(o.b)("p",null,"In case the tests are being executed with ",Object(o.b)("inlineCode",{parentName:"p"},"dotnet test")," you have to create a class which inherits from FatConfig.\nIt will be picked up automatically by the Fat framework."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"using Yontech.Fat.Filters;\n\n/// ...\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        LogLevel = LogLevel.Debug;\n\n        AddChrome();\n        AddFirefox();\n        \n        // ... other configuration\n    }\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"In case there are multiple Config classes the one with the shortest name will be picked up\nand a warning will be logged.")),Object(o.b)("h2",{id:"add-browser-configurations"},"Add Browser configurations"),Object(o.b)("p",null,"Specify the folder where driver is located. The default value is ",Object(o.b)("inlineCode",{parentName:"p"},"drivers"),"."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),'config.AddFirefox(new FirefoxFatConfig()\n{\n    DriversFolder = "firefox_driver",\n    RunInBackground = true,\n});\n')),Object(o.b)("p",null,"Enable Automatic Driver download. Optionally you can and specify the version you want to download."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),'config.AddChrome(new ChromeFatConfig()\n{\n    AutomaticDriverDownload = true,\n    Version = ChromeVersion.v80,\n    DriversFolder = "chrome_driver",\n});\n')),Object(o.b)("h2",{id:"remote-debugging-with-chrome"},"Remote debugging with Chrome"),Object(o.b)("p",null,"Chrome supports remote debugging which means that Fat Framework will connect to an existing\nrunning instance of Chrome. First open Chrome with remote-debugging"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-shell"}),'# on MacOs\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222 --user-data-dir="~/FatProfile"\n\n# on Windows\nChrome.exe --remote-debugging-port=9222 --user-data-dir="FatProfile"\n')),Object(o.b)("p",null,"Then configure RemoteDebuggerAddress"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"config.AddChromeRemote(9222);\n\n")),Object(o.b)("h2",{id:"browser-start-options"},"Browser start options"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"config.AddChrome(new ChromeFatConfig()\n{\n    RunInBackground = true,\n    StartMaximized = false,\n    InitialSize = new Size(1200, 800),\n    DisablePopupBlocking = true\n});\n")),Object(o.b)("h2",{id:"browser-behaviour"},"Browser behaviour"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"config.Timeouts.DefaultTimeout = 4000;\nconfig.Timeouts.FinderTimeout = 2000;\n")),Object(o.b)("h2",{id:"logging"},"Logging"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),'config.LogLevel = LogLevel.Warning;\nconfig.LogLevelConfig.Add("YonTech.Fat.Runner.FatRunner", LogLevel.Info);\nconfig.LogLevelConfig.Add("MyClass", LogLevel.Debug);\n')),Object(o.b)("h2",{id:"run-test-settings"},"Run test settings"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"config.DelayBetweenSteps = 1000;\nconfig.DelayBetweenTestCases = 2000;\n")),Object(o.b)("h2",{id:"extra-properties-not-documented-yet"},"Extra properties not documented yet"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"List<FatBusyCondition> BusyConditions { get; set; } = new List<FatBusyCondition>();\n\nITestCaseFilter Filter { get; set; }\nList<FatInterceptor> Interceptors { get; set; } = new List<FatInterceptor>();\n\n")))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/fat-config.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-fat-config-mdx-652b24af8182820db578.js.map