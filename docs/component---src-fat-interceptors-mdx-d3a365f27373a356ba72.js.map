{"version":3,"sources":["webpack:///../src/fat-interceptors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,iBAAQ,CACN,GAAM,4BADR,4BAGA,0EACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,gcAmBL,iBAAQ,CACN,GAAM,mCADR,mCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sQAgBL,iBAAQ,CACN,GAAM,wBADR,wBAGA,8DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8uB,wMAsBTJ,EAAWK,gBAAiB","file":"component---src-fat-interceptors-mdx-d3a365f27373a356ba72.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/razvan/my-work/YonTech.Fat.Samples/angular.realworld.io/angular.realworld.io/fat/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fat-interceptor\"\n    }}>{`Fat Interceptor`}</h1>\n    <h2 {...{\n      \"id\": \"create-a-fat-interceptor\"\n    }}>{`Create a Fat Interceptor`}</h2>\n    <p>{`Create a class which inherits from FatInterceptor`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat.Interceptors;\n\n// ...\n\npublic class MyLoggerInterceptor : FatInterceptor\n{\n    protected override void OnExecutionStarts(ExecutionStartsParams startsParams)\n    {\n        Console.WriteLine(\"The execution is going to start\");\n    }\n\n    protected override void OnTestCasePassed(FatTestCase testCase, FatTestCasePassed passed)\n    {\n        Console.WriteLine(\"PASS!! {0}\", testCase.FullyQualifiedName);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-interceptors-in-config-file\"\n    }}>{`Use interceptors in config file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat.Filters;\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        Browser = BrowserType.Chrome;\n        \n        var myInterceptor = new MyLoggerInterceptor();\n        Interceptors.Add(myInterceptor);\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"intercepting-methods\"\n    }}>{`Intercepting methods`}</h2>\n    <p>{`You can override any of these methods`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public class MyLoggerInterceptor : FatInterceptor\n{\n    protected override void OnExecutionStarts(ExecutionStartsParams startsParams) { }\n    protected override void OnExecutionFinished(ExecutionFinishedParams finishedParams) { }\n\n    protected override void BeforeTestCase(FatTestCase testCase) { }\n    protected override void BeforeTestClass(TestClassParams testClass) { }\n\n    protected override void AfterTestClass(TestClassParams testClass) { }\n    \n    protected override void OnTestCasePassed(FatTestCase testCase, FatTestCasePassed passed) { }\n    protected override void OnTestCaseFailed(FatTestCase testCase, FatTestCaseFailed failed) { }\n    protected override void OnTestCaseSkipped(FatTestCase testCase) { }\n\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}