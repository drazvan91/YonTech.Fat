{"version":3,"sources":["webpack:///../src/fat-env-data.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,2SAiBL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gJASL,iBAAQ,CACN,GAAM,6BADR,6BAGA,gDAA+B,0BAAYA,WAAW,KAAvB,kBAA/B,4GAEA,mDAAkC,0BAAYA,WAAW,KAAvB,qBAAlC,SACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mDAML,iBAAQ,CACN,GAAM,iBADR,iBAGA,gFACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gJ,oMAUTJ,EAAWK,gBAAiB","file":"component---src-fat-env-data-mdx-0f2dcf11b0cce57ad676.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/razvan/my-work/YonTech.Fat.Samples/angular.realworld.io/angular.realworld.io/fat/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fat-envdata\"\n    }}>{`Fat EnvData`}</h1>\n    <h2 {...{\n      \"id\": \"define-envdata\"\n    }}>{`Define EnvData`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\n\npublic class MyConstants : FatEnvData\n{\n    public MyConstants()\n        : base(\"files/my-constants.json\")\n    {\n    }\n\n    public string LoginPageUrl { get; set; }\n    public string AdminUsername { get; set; }\n    public string AdminPassword { get; set; }\n}\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`/// my-constants.json\n{\n    \"loginPageUrl\":\"http://website.com/login\",\n    \"adminUsername\":\"admin\",\n    \"adminPassword\":\"password\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"override-on-local-machine\"\n    }}>{`Override on local machine`}</h2>\n    <p>{`Create a file with name `}<inlineCode parentName=\"p\">{`.override.json`}</inlineCode>{`. Usually the .override.json file is not commited in git so you might want to\nadd it to gitignore file.`}</p>\n    <p>{`Override any property from `}<inlineCode parentName=\"p\">{`my-constants.json`}</inlineCode>{` file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"adminPassword\": \"anotherPassword\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-txt-files\"\n    }}>{`Use txt files`}</h2>\n    <p>{`Instead of json files you can also configure txt files.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`# my-constants.txt\nLoginPageUrl=http://website.com/login\nAdminUsername=admin\nAdminPassword=password\n# use '#' to comment a line\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}