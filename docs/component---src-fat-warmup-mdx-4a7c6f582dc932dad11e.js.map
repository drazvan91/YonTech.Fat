{"version":3,"sources":["webpack:///../src/fat-warmup.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,oMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,oBADR,oBAGA,2KACI,0BAAYC,WAAW,KAAvB,sBADJ,4DAEA,8BACE,iBAAGA,WAAW,cAAd,oIAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4XAiBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,qHAAoG,0BAAYA,WAAW,KAAvB,iCAApG,cACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wO,kMAoBTJ,EAAWK,gBAAiB","file":"component---src-fat-warmup-mdx-4a7c6f582dc932dad11e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/razvan/my-work/YonTech.Fat.Samples/angular.realworld.io/angular.realworld.io/fat/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fat-warmup\"\n    }}>{`Fat Warmup`}</h1>\n    <h2 {...{\n      \"id\": \"defining-warmups\"\n    }}>{`Defining Warmups`}</h2>\n    <p>{`Sometimes you might want to warmup the application before running tests. This can be achieved by creating classes which implements abstract\nclass `}<inlineCode parentName=\"p\">{`Yontech.Fat.Warmup`}</inlineCode>{`. The warmup will be picked up automatically at runtime.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If more Warmup classes are defined then all of them will be executed. It will be executed one time for each Browser configured.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\n\npublic class MyWarmup : FatWarmup\n{\n    HomePage homePage { get; set; } // Fat objects (like pages, flows, env datas, etc) will be injected\n\n    protected override void Warmup() // this is the method that needs to be implemented\n    {\n        this.WebBrowser.Navigate(\"https://mywebsite.com\");\n\n        homePage.LogoButton.Click();\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"customize-timeout\"\n    }}>{`Customize timeout`}</h2>\n    <p>{`If the warmup takes more than 2 minutes (the default warmup timeout) you can change it using `}<inlineCode parentName=\"p\">{`config.Timeouts.WarmupTimeout`}</inlineCode>{` property.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        AddChrome();\n\n        AddFirefox();\n\n        Timeouts.WarmupTimeout = 10 * 60 * 1000; // meaning 10 minutes\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}