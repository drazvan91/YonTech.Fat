{"version":3,"sources":["webpack:///../src/fat-labels.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,oMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,+BADR,+BAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,kQAoBL,iBAAQ,CACN,GAAM,uDADR,uDAGA,wGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kPAoBL,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6OAUL,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mZAmBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,6EACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,aAApB,yBAAoG,0BAAYA,WAAW,MAAvB,2BACpG,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBAApB,yBAAyG,0BAAYA,WAAW,MAAvB,iCAE3G,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6R,kMA0BTJ,EAAWK,gBAAiB","file":"component---src-fat-labels-mdx-d47e748d4746e0f58373.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/razvan/my-work/YonTech.Fat.Samples/angular.realworld.io/angular.realworld.io/fat/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fat-label\"\n    }}>{`Fat Label`}</h1>\n    <h2 {...{\n      \"id\": \"defining-labels-on-a-method\"\n    }}>{`Defining labels on a method`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\nusing Yontech.Fat.Labels;\n\n// ...\n\npublic class MyTestCases : FatTest\n{\n    [FatLabel(\"my-label\")]\n    public void Test_this_has_a_label()\n    {\n    }\n\n    public void Test_this_does_not_have_a_label()\n    {\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defining-labels-on-all-tests-within-a-fattest-class\"\n    }}>{`Defining labels on all tests within a FatTest class`}</h2>\n    <p>{`Defining FatLabel on the class is like defining for all tests within that class`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\nusing Yontech.Fat.Labels;\n\n// ...\n\n[FatLabel(\"my-label\")]\npublic class MyTestCases : FatTest\n{\n    public void Test_this_is_smoke_test()\n    {\n    }\n\n    public void Test_another_test()\n    {\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"filter-tests\"\n    }}>{`Filter tests`}</h2>\n    <h3 {...{\n      \"id\": \"using-dotnet-test\"\n    }}>{`Using dotnet test`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`dotnet test --filter \"Label=my-label\"\n\n# to filter using OR statement use |\ndotnet test --filter \"Label=my-label1|Label=my-label2\"\n\n# to filter using AND statement use &\ndotnet test --filter \"Label=my-label1&Label=my-label2\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-fatconfig\"\n    }}>{`Using FatConfig`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat.Filters;\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        Browser = BrowserType.Chrome;\n        \n        // filter tests with one label\n        Filter = new LabelTestCaseFilter(\"my-label\";\n\n        // or filter tests with at least one of these labels\n        Filter = new LabelTestCaseFilter(\"my-label1\", \"my-label2\", \"my-label3\")\n    }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"predefined-labels\"\n    }}>{`Predefined Labels`}</h2>\n    <p>{`There are two predefined labels that could be handy:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SmokeTest`}</inlineCode>{` which is the same as `}<inlineCode parentName=\"li\">{`FatLabel(\"smoke-test\")`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RegressionTest`}</inlineCode>{` which is the same as `}<inlineCode parentName=\"li\">{`FatLabel(\"regression-test\")`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\nusing Yontech.Fat.Labels;\n\n// ...\n\npublic class MyTestCases : FatTest\n{\n    [SmokeTest]\n    [RegressionTest]\n    public void Test_this_is_both()\n    {\n    }\n\n    [SmokeTest]\n    public void Test_this_is_only_smoke_test()\n    {\n    }\n}\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}