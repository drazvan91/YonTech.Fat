{"version":3,"sources":["webpack:///../src/fat-config.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,oMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,gbAsBL,iBAAQ,CACN,GAAM,qBADR,qBAGA,kEAAiD,0BAAYA,WAAW,KAAvB,eAAjD,wHAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uTAkBL,8BACE,iBAAGA,WAAW,cAAd,8HAGF,iBAAQ,CACN,GAAM,0BADR,0BAGA,qGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8EAKL,sHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yHAKL,iBAAQ,CACN,GAAM,gCADR,gCAGA,yLAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qOAQL,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sDAIL,iBAAQ,CACN,GAAM,yBADR,yBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gHAML,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2HAOL,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4KAML,iBAAQ,CACN,GAAM,qBADR,qBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6EAKL,iBAAQ,CACN,GAAM,uCADR,uCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,yN,kMAYTJ,EAAWK,gBAAiB","file":"component---src-fat-config-mdx-476057ad250c5296d9c7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/razvan/my-work/YonTech.Fat.Samples/angular.realworld.io/angular.realworld.io/fat/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fat-config\"\n    }}>{`Fat Config`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat;\nusing Yontech.Fat.ConsoleRunner;\n\n/// ...\n\nstatic int Main(string[] args)\n{\n    var config = new FatConfig()\n    {\n        Browser = BrowserType.Chrome;\n        RunInBackground = true;\n        LogLevel = LogLevel.Debug;\n        InitialSize = new Size(900, 900);\n        // ... other configuration\n    };\n    \n    FatConsoleRunner runner = new FatConsoleRunner(config);\n    runner.Run();\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"automatic-pick-up\"\n    }}>{`Automatic pick up`}</h2>\n    <p>{`In case the tests are being executed with `}<inlineCode parentName=\"p\">{`dotnet test`}</inlineCode>{` you have to create a class which inherits from FatConfig.\nIt will be picked up automatically by the Fat framework.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`using Yontech.Fat.Filters;\n\n/// ...\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        Browser = BrowserType.Chrome;\n        RunInBackground = true;\n        LogLevel = LogLevel.Debug;\n        InitialSize = new Size(900, 900);\n        // ... other configuration\n    }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`In case there are multiple Config classes the one with the shortest name will be picked up\nand a warning will be logged.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"browser-configurations\"\n    }}>{`Browser configurations`}</h2>\n    <p>{`Specify the browser that will be used and the folder where driver is located`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.Browser = BrowserType.Chrome;\nconfig.DriversFolder = \"drivers\";\n`}</code></pre>\n    <p>{`Enable Automatic Driver download and in case that is Chrome specify the version that you want`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.AutomaticDriverDownload = true;\nChromeVersion AutomaticDriverDownloadChromeVersion = ChromeVersion.Latest;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"remote-debugging-with-chrome\"\n    }}>{`Remote debugging with Chrome`}</h2>\n    <p>{`Chrome supports remote debugging which means that Fat Framework will connect to an existing\nrunning instance of Chrome. First open Chrome with remote-debugging`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`# on MacOs\n/Applications/Google\\\\ Chrome.app/Contents/MacOS/Google\\\\ Chrome --remote-debugging-port=9222 --user-data-dir=\"~/FatProfile\"\n\n# on Windows\nChrome.exe --remote-debugging-port=9222 --user-data-dir=\"FatProfile\"\n`}</code></pre>\n    <p>{`Then configure RemoteDebuggerAddress`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.RemoteDebuggerAddress = \"localhost:9222\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"browser-start-options\"\n    }}>{`Browser start options`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.RunInBackground = true;\nconfig.StartMaximized = false;\nconfig.InitialSize = new Size(1200, 800);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"browser-behaviour\"\n    }}>{`Browser behaviour`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.Timeouts.DefaultTimeout = 4000;\nconfig.Timeouts.FinderTimeout = 2000;\n\nconfig.DisablePopupBlocking = true;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"logging\"\n    }}>{`Logging`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.LogLevel = LogLevel.Warning;\nconfig.LogLevelConfig.Add(\"YonTech.Fat.Runner.FatRunner\", LogLevel.Info);\nconfig.LogLevelConfig.Add(\"MyClass\", LogLevel.Debug);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"run-test-settings\"\n    }}>{`Run test settings`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`config.DelayBetweenSteps = 1000;\nconfig.DelayBetweenTestCases = 2000;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extra-properties-not-documented-yet\"\n    }}>{`Extra properties not documented yet`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`List<FatBusyCondition> BusyConditions { get; set; } = new List<FatBusyCondition>();\n\nITestCaseFilter Filter { get; set; }\nList<FatInterceptor> Interceptors { get; set; } = new List<FatInterceptor>();\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}