(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{hgyP:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var r=n("/FXl"),s=n("TjRS");n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/fat-interceptors.mdx"}});var i={_frontmatter:o},c=s.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,["components"]);return Object(r.b)(c,a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"fat-interceptor"},"Fat Interceptor"),Object(r.b)("h2",{id:"create-a-fat-interceptor"},"Create a Fat Interceptor"),Object(r.b)("p",null,"Create a class which inherits from FatInterceptor"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),'using Yontech.Fat.Interceptors;\n\n// ...\n\npublic class MyLoggerInterceptor : FatInterceptor\n{\n    protected override void OnExecutionStarts(ExecutionStartsParams startsParams)\n    {\n        Console.WriteLine("The execution is going to start");\n    }\n\n    protected override void OnTestCasePassed(FatTestCase testCase, FatTestCasePassed passed)\n    {\n        Console.WriteLine("PASS!! {0}", testCase.FullyQualifiedName);\n    }\n}\n')),Object(r.b)("h2",{id:"use-interceptors-in-config-file"},"Use interceptors in config file"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"using Yontech.Fat.Filters;\n\npublic class MyConfig : FatConfig\n{\n    public MyConfig()\n    {\n        Browser = BrowserType.Chrome;\n        \n        var myInterceptor = new MyLoggerInterceptor();\n        Interceptors.Add(myInterceptor);\n    }\n}\n\n")),Object(r.b)("h2",{id:"intercepting-methods"},"Intercepting methods"),Object(r.b)("p",null,"You can override any of these methods"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"public class MyLoggerInterceptor : FatInterceptor\n{\n    protected override void OnExecutionStarts(ExecutionStartsParams startsParams) { }\n    protected override void OnExecutionFinished(ExecutionFinishedParams finishedParams) { }\n\n    protected override void BeforeTestCase(FatTestCase testCase) { }\n    protected override void BeforeTestClass(TestClassParams testClass) { }\n\n    protected override void AfterTestClass(TestClassParams testClass) { }\n    \n    protected override void OnTestCasePassed(FatTestCase testCase, FatTestCasePassed passed) { }\n    protected override void OnTestCaseFailed(FatTestCase testCase, FatTestCaseFailed failed) { }\n    protected override void OnTestCaseSkipped(FatTestCase testCase) { }\n\n}\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/fat-interceptors.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-fat-interceptors-mdx-fb60d8ce1533a8baa263.js.map